<?xml version="1.0"?>
<!-- =========================================================================
  Copyright 2013 Rectangular Software Ltd.
  Copyright 2008-2013 Daniel W. Dyer

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
========================================================================== -->
<antlib xmlns:current="ant:current">

  <taskdef name="once" classname="com.rectangularsoftware.antlib.tasks.Once" />
  <taskdef name="gzip" classname="com.rectangularsoftware.antlib.tasks.GZip" />

  <macrodef name="defaults">
    <sequential>
      <current:once property="rectangular-antlib.defaults">
        <!-- The directory under which each of the modules directories is found. -->
        <property name="modules.dir" location="." />
        <!-- Per-module locations. -->
        <property name="src.dir" value="src" />
        <property name="java.dir" value="${src.dir}/java" />
        <property name="build.dir" value="build"/>
        <property name="classes.dir" value="${build.dir}/classes" />
        <property name="generated.dir" value="${build.dir}/generated" />
        <property name="lib.dir" value="lib"/>
        <property name="lib.compiletime" value="${lib.dir}/compiletime" />
        <property name="lib.runtime" value="${lib.dir}/runtime" />
        <property name="docs.dir" value="docs"/>
        <property name="api.dir" value="${docs.dir}/api"/>
        <property name="coverage.dir" value="${docs.dir}/coverage" />
        <property name="test-results.dir" value="${docs.dir}/test-results" />
        <property name="temp.dir" value="temp" />
        <property name="dist.dir" value="dist" />
        <property name="release.dir" value="release" />
        <property name="encoding" value="utf-8" />

        <!-- Defaults for Android projects.  Requires sdk.dir, tools.version and target to have already been set. -->
        <property name="resource.dir" value="res" />
        <property name="asset.dir" value="assets" />
        <property name="target.dir" value="${sdk.dir}/platforms/${target}" />
        <property name="tools.dir" value="${sdk.dir}/tools" />
        <property name="build.tools.dir" value="${sdk.dir}/build-tools/${tools.version}" />
        <path id="android.antlibs">
          <pathelement path="${sdk.dir}/tools/lib/ant-tasks.jar" />
          <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
          <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
        </path>
        <condition property="dx.executable" value="dx.bat" else="dx">
          <os family="windows" />
        </condition>
        <taskdef name="apkbuilder" classname="com.android.ant.ApkBuilderTask" classpathref="android.antlibs" />

      </current:once>
    </sequential>
  </macrodef>


  <!-- This macro deletes all build artifacts from a module. -->
  <macrodef name="clean">
    <attribute name="module"/>
    <sequential>
      <current:defaults />
      <delete dir="${modules.dir}/@{module}/${build.dir}"/>
    </sequential>
  </macrodef>

  
  <!-- This macro compiles one source tree (i.e. the main source tree
       or the unit test source tree) of a given module. -->
  <macrodef name="compile.tree">
    <attribute name="module"/>
    <attribute name="tree"/>
    <attribute name="source"/>
    <attribute name="target"/>
    <attribute name="bootclasspath"/>
    <element name="treeclasspath" optional="true"/>
    <sequential>
      <current:defaults />
      <mkdir dir="${modules.dir}/@{module}/${classes.dir}/@{tree}" />
      <!-- If there is no generated code to compile, we still need the directory to
           look at. -->
      <mkdir dir="${modules.dir}/@{module}/${generated.dir}/@{tree}" />
      <javac destdir="${modules.dir}/@{module}/${classes.dir}/@{tree}"
             debug="on"
             deprecation="on"
             optimize="on"
             source="@{source}"
             target="@{target}"
             bootclasspath="@{bootclasspath}"
             srcdir="${modules.dir}/@{module}/${java.dir}/@{tree}:${modules.dir}/@{module}/${generated.dir}/@{tree}"
             encoding="${encoding}"
             includeantruntime="false">
        <classpath>
          <treeclasspath/>
        </classpath>
        <compilerarg value="-Xlint:unchecked" />
      </javac>
    </sequential>
  </macrodef>


  <!-- This macro compiles all source (including unit tests) for a
       single module.  -->
  <macrodef name="compile">
    <attribute name="module"/>
    <attribute name="source" default="1.6"/>
    <attribute name="target" default="1.6"/>
    <element name="additionalclasspath" optional="true"/>
    <sequential>
      <current:defaults />

      <path id="moduleclasspath">
        <additionalclasspath/>
        <!-- Module-specific libraries (if any). -->
        <fileset dir="${modules.dir}/@{module}/${lib.dir}"
                 includes="**/*.jar"
                 erroronmissingdir="false" />
        <!-- Global project libraries. -->
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <!-- Other modules. -->
        <fileset dir="${modules.dir}" includes="*/${build.dir}/*.jar"/>
      </path>

      <current:compile.tree module="@{module}"
                            tree="main"
                            source="@{source}"
                            target="@{target}"
                            bootclasspath="${target.dir}/android.jar">
        <treeclasspath>
          <path refid="moduleclasspath" />
        </treeclasspath>
      </current:compile.tree>
      <current:compile.tree module="@{module}"
                            tree="test"
                            source="@{source}"
                            target="@{target}"
                            bootclasspath="${target.dir}/android.jar">
        <treeclasspath>
          <!-- Add the main classes to the classpath for unit test compilation. -->
          <path location="${modules.dir}/@{module}/${classes.dir}/main" />
          <path refid="moduleclasspath" />
        </treeclasspath>
      </current:compile.tree>
    </sequential>
  </macrodef>


  <!-- Shrink and obfuscate a module's class files. -->
  <macrodef name="obfuscate">
    <attribute name="module"/>
    <attribute name="usemixedcaseclassnames" default="true"/>
    <attribute name="defaultpackage" default=""/>
    <attribute name="printmapping" default="false"/>
    <element name="configuration" optional="true"/>
    <element name="additionalclasspath" optional="true"/>
    <sequential>
      <taskdef resource="proguard/ant/task.properties" classpath="${lib.compiletime}/proguard/proguard.jar" />
      <move file="${modules.dir}/@{module}/${classes.dir}/main" todir="${modules.dir}/@{module}/${build.dir}/unobfuscated" />
      <proguard shrink="true"
                obfuscate="true"
                optimize="true"
                usemixedcaseclassnames="@{usemixedcaseclassnames}"
                allowaccessmodification="true"
                skipnonpubliclibraryclassmembers="false"
                overloadaggressively="false"
                printmapping="@{printmapping}"
                defaultpackage="@{defaultpackage}">
        <libraryjar path="${target.dir}/android.jar" />
        <libraryjar>
          <fileset dir="${lib.runtime}" includes="**/*.jar" erroronmissingdir="false"/>
        </libraryjar>
        <libraryjar>
          <additionalclasspath />
        </libraryjar>
        <injar location="${modules.dir}/@{module}/${build.dir}/unobfuscated/main" />
        <outjar location="${modules.dir}/@{module}/${classes.dir}/main" />

        <configuration />
        <keep extends="java.lang.Enum">
          <method name="values" />
        </keep>
        <!-- Don't rename activities or other components otherwise the Android manifest will be wrong. -->
        <keep extends="android.app.Activity" />
        <keep extends="android.app.Application" />
        <keep extends="android.app.Service" />
        <keep extends="android.content.BroadcastReceiver" />
        <keep extends="android.content.ContentProvider" />
        <keep extends="android.app.Fragment" />
        <keep extends="android.support.v4.app.Fragment" />
        <dontnote filter="android.support.v4.app.Fragment" /> <!-- Support library might not be present. -->
        <keepclassmembers>
          <field type="android.os.Parcelable$Creator" name="CREATOR" />
        </keepclassmembers>
        <!-- Preserve names and constructors needed to instantiate views from XML. -->
        <keepclasseswithmembers extends="android.view.View">
          <constructor access="public" parameters="android.content.Context,android.util.AttributeSet"/>
        </keepclasseswithmembers>
        <!-- Preserve names and constructors needed to instantiate preferences from XML. -->
        <keepclasseswithmembers extends="android.preference.Preference">
          <constructor access="public" parameters="android.content.Context,android.util.AttributeSet"/>
        </keepclasseswithmembers>

      </proguard>
    </sequential>
  </macrodef>

  
  <!-- This macro builds a JAR file for a module, containing all of
       the classes in the main source group for the module
       (i.e. unit test classes are excluded).  The JAR file name is
       derived from the module name (unless over-ridden). -->
  <macrodef name="jar">
    <attribute name="module"/>
    <attribute name="jarfile" default="@{module}.jar" description="JAR file name"/>
    <attribute name="classpath" default="" description="Manifest class path"/>
    <attribute name="mainclass" default="" description="Manifest main class"/>
    <element name="additionalcontents" optional="true"/>
    <sequential>
      <current:defaults />
      <jar destfile="${modules.dir}/@{module}/${build.dir}/@{jarfile}">
        <fileset dir="${modules.dir}/@{module}/${classes.dir}/main"/>
        <fileset dir="${modules.dir}/@{module}/${java.dir}/resources" erroronmissingdir="false" />
        <manifest>
          <attribute name="Class-Path" value="@{classpath}"/>
          <attribute name="Main-Class" value="@{mainclass}"/>
        </manifest>
        <additionalcontents/>
      </jar>
    </sequential>
  </macrodef>


  <!-- This macro builds a JAR file containing a module's source code
       (excluding tests).  The JAR file name is derived from the module name
       (unless over-ridden). -->
  <macrodef name="source">
    <attribute name="module"/>
    <attribute name="tree" default="main" description="Source tree (e.g. 'main' or 'test') to package." /> 
    <attribute name="jarfile" default="@{module}-src.jar" description="Source JAR file name"/>
    <sequential>
      <current:defaults />
      <mkdir dir="${modules.dir}/@{module}/${build.dir}" />
      <jar destfile="${modules.dir}/@{module}/${build.dir}/@{jarfile}">
        <fileset dir="${modules.dir}/@{module}/${java.dir}/@{tree}"/>
      </jar>
    </sequential>
  </macrodef>


  <!-- Runs TestNG unit tests for all modules, generates a report using ReportNG and
       measures coverage with Cobertura. -->
  <macrodef name="test">
    <attribute name="suites" />
    <attribute name="title" default="Unit Test Report" />
    <attribute name="reportdir" default="${test-results.dir}" />
    <attribute name="dialect" default="testng" description="Set to 'junit' to generate XML for junitreport." />
    <attribute name="headless" default="false" />
    <attribute name="mincoverage" default="60" />
    <attribute name="coverageExcludeRegex" default="" />

    <sequential>
      <current:defaults />
      
      <mkdir dir="${temp.dir}/originals" />
      
      <path id="test.path">
        <dirset dir="." includes="**/${classes.dir}/test" />
        <dirset dir="." includes="**/${java.dir}/test-resources" />
        <fileset dir="${temp.dir}" includes="*.jar"/>
        <fileset dir="." includes="**/${lib.dir}/**/*.jar"/>
        <pathelement path="${target.dir}/android.jar" />
      </path>

      <taskdef resource="tasks.properties" classpathref="test.path" />
      <taskdef resource="testngtasks" classpathref="test.path"/>

      <!-- Bytecode instrumentation to enable collection of test coverage data. -->
      <copy todir="${temp.dir}/originals" flatten="true">
        <!-- Instrument binary JARs, ignore source JARs. -->
        <fileset dir="." includes="**/${build.dir}/*.jar" excludes="**/${build.dir}/*-src.jar" />
      </copy>
      <cobertura-instrument todir="${temp.dir}"
                            datafile="${temp.dir}/cobertura.ser"
                            ignoreTrivial="true">
        <includeClasses regex=".*" />
        <excludeClasses regex="@{coverageExcludeRegex}" />
        <fileset dir="${temp.dir}/originals" includes="*.jar"/>
      </cobertura-instrument>

      <!-- Run the unit tests on the instrumented classes. -->
      <mkdir dir="@{reportdir}" />

      <testng classpathref="test.path"
              outputdir="@{reportdir}"
              haltonfailure="false"
              useDefaultListeners="false"
              listeners="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter">
        <xmlfileset dir="." includes="@{suites}"/>
        <sysproperty key="java.awt.headless" value="@{headless}" />
        <sysproperty key="net.sourceforge.cobertura.datafile"
                     file="${temp.dir}/cobertura.ser" />
        <sysproperty key="org.uncommons.reportng.title"
                     value="@{title}" />
        <sysproperty key="org.uncommons.reportng.coverage-report"
                     value="../../coverage/index.html" />
        <sysproperty key="org.uncommons.reportng.xml-dialect"
                     value="@{dialect}"/>
      </testng>
      <delete file="velocity.log" />

      <!-- Generate the HTML coverage report. -->
      <mkdir dir="${coverage.dir}" />
      <cobertura-report format="html"
                        destdir="${coverage.dir}"
                        datafile="${temp.dir}/cobertura.ser">
        <dirset dir="." includes="**/${java.dir}/main" />
      </cobertura-report>
      <!-- Generate an XML coverage report so that Hudson can graph trends. -->
      <cobertura-report format="xml"
                        destdir="${coverage.dir}"
                        datafile="${temp.dir}/cobertura.ser">
        <dirset dir="." includes="**/${java.dir}/main" />
      </cobertura-report>

      <!-- If the coverage is poor, fail. -->
      <cobertura-check totallinerate="@{mincoverage}"
                       totalbranchrate="@{mincoverage}"
                       datafile="${temp.dir}/cobertura.ser"/>

      <delete dir="${temp.dir}" />
    </sequential>
  </macrodef>


  <!-- Generates API documentation for all modules. -->
  <macrodef name="javadoc">
    <attribute name="dir" default="${api.dir}"/>
    <attribute name="title"/>
    <attribute name="version" default=""/>
    <attribute name="bootclasspath"/>
    <attribute name="excludes" default=""/>
    <element name="additionalconfig" optional="true"/>
    <sequential>
      <current:defaults />
      <mkdir dir="@{dir}"/>
      <javadoc destdir="@{dir}"
               bootclasspath="@{bootclasspath}"
               doctitle="@{title} @{version}"
               windowtitle="@{title}"
               encoding="${encoding}">
        <classpath>
          <fileset dir="." includes="**/${lib.runtime}/*.jar" />
        </classpath>
        <fileset dir="." defaultexcludes="yes" includes="**/${java.dir}/main/**/*.java,**/${generated.dir}/main/**/*.java" excludes="@{excludes}" />
        <header><![CDATA[@{title}<br><small>(Version @{version})</small>]]></header>
        <link href="http://java.sun.com/javase/6/docs/api/"/>
        <additionalconfig />
      </javadoc>
    </sequential>
  </macrodef>


  <!-- Copy all module JARs and runtime libs to the dist directory.  Excludes source JARS
       (those that end with "-src.jar"). -->
  <macrodef name="dist">
    <attribute name="libdir" default="lib" description="Sub-directory for libs, leave blank to place libs directly in the dist dir."/>
    <sequential>
      <current:defaults />
      <mkdir dir="${dist.dir}" />
      <copy todir="${dist.dir}" flatten="true">
        <fileset dir="." includes="**/${build.dir}/*.jar" excludes="**/${build.dir}/*-src.jar"/>
      </copy>
      <mkdir dir="${dist.dir}/@{libdir}" />
      <copy todir="${dist.dir}/@{libdir}" flatten="true">
        <fileset dir="." includes="**/${lib.runtime}/*"/>
      </copy>
    </sequential>
  </macrodef>


  <!-- Builds release archives (both zip and tgz) for the project.  By default, these
       archives include the full contents of the dist directory, the API docs, and any
       .txt files from the root of the project (e.g. README.txt, LICENCE.txt, CHANGELOG.txt).
       Additional contents can be specified with nested zipfileset or tarfileset tags. -->       
  <macrodef name="release">
    <attribute name="name"/>
    <element name="additionalcontents" optional="true"/>
    <sequential>
      <current:defaults />

      <mkdir dir="${release.dir}" />
      <!-- Create a GZipped TAR file containing the built binaries, the API
           documentation, and source code for the examples. -->
      <tar destfile="${release.dir}/@{name}.tgz"
           compression="gzip"
           longfile="gnu">
        <tarfileset dir="${dist.dir}"
                    prefix="@{name}"
                    includes="**/*" />
        <tarfileset dir="${api.dir}"
                    prefix="@{name}/docs/api"
                    includes="**/*"
                    erroronmissingdir="false" />
        <!-- Don't forget to include the licence and other important information. -->
        <tarfileset dir="."
                    prefix="@{name}"
                    includes="*.txt" />
        <additionalcontents/>
      </tar>
      <!-- Also create a zip file release for the convenience of Windows users. -->
      <zip destfile="${release.dir}/@{name}.zip">
        <zipfileset dir="${dist.dir}"
                    prefix="@{name}"
                    includes="**/*" />
        <zipfileset dir="${api.dir}"
                    prefix="@{name}/docs/api"
                    includes="**/*"
                    erroronmissingdir="false" />
        <!-- Don't forget to include the licence and other important information. -->
        <zipfileset dir="."
                    prefix="@{name}"
                    includes="*.txt" />
        <additionalcontents/>
      </zip>
    </sequential>
  </macrodef>


  <!-- Generate the Android R.java source file from the resources directory. -->
  <macrodef name="resources">
    <attribute name="manifest" default="AndroidManifest.xml" />
    <sequential>
      <current:defaults />
      <!-- Git does not store empty directories, so we have to make sure the asset directory exists. -->
      <mkdir dir="${asset.dir}" />
      <mkdir dir="${generated.dir}/main" />
      <exec executable="${build.tools.dir}/aapt" failonerror="true">
        <arg value="package" />
        <arg value="-m" />
        <arg value="-M" />
        <arg path="@{manifest}" />
        <arg value="-S" />
        <arg path="${resource.dir}" />
        <arg value="-A" />
        <arg path="${asset.dir}" />
        <arg value="-J" />
        <arg path="${generated.dir}/main" />
        <arg value="-I" />
        <arg path="${target.dir}/android.jar" />
      </exec>
    </sequential>
  </macrodef>


  <macrodef name="package">
    <attribute name="debug" />
    <attribute name="manifest" />
    <attribute name="name"/>
    <attribute name="package" />
    <sequential>
      <current:defaults />

      <apply executable="${build.tools.dir}/${dx.executable}" parallel="true" failonerror="true">
        <arg value="--dex" />
        <arg value="--output=${basedir}/${build.dir}/classes.dex" />
        <arg path="${classes.dir}/main" />
        <fileset dir="${lib.runtime}" includes="*.jar" erroronmissingdir="false" />
      </apply>

      <exec executable="${build.tools.dir}/aapt" failonerror="true">
        <arg value="package" />
        <arg value="-M" />
        <arg path="@{manifest}" />
        <arg value="-S" />
        <arg path="${resource.dir}" />
        <arg value="-A" />
        <arg path="${asset.dir}" />
        <arg value="-I" />
        <arg path="${target.dir}/android.jar" />
        <arg value="-F" />
        <arg path="${build.dir}/@{name}.ap_" />
        <arg line="--rename-manifest-package @{package}"/>
      </exec>

      <apkbuilder outfolder="${build.dir}"
                  apkfilepath="${build.dir}/@{name}.apk"
                  resourcefile="@{name}.ap_"
                  debugpackaging="@{debug}"
                  debugsigning="@{debug}">
        <dex path="${build.dir}/classes.dex" />
        <sourcefolder path="${java.dir}/main" />
        <jarfolder path="${lib.runtime}" />
      </apkbuilder>

    </sequential>
  </macrodef>


  <macrodef name="package-debug">
    <attribute name="manifest" default="AndroidManifest.xml" />
    <attribute name="name" default="${ant.project.name}-debug"/>
    <attribute name="package" />
    <sequential>
      <current:defaults />

      <!-- This property has to be set for 1.5 projects because apkbuilder is expecting it. -->
      <property name="out.debug.unaligned.package" value="${build.dir}/@{name}-unaligned.apk" />
      <current:package debug="true" manifest="@{manifest}" name="@{name}-unaligned" package="@{package}"/>

      <exec executable="${tools.dir}/zipalign" failonerror="true">
        <arg value="-f" />
        <arg value="4" />
        <arg path="${out.debug.unaligned.package}" />
        <arg path="${build.dir}/@{name}.apk" />
      </exec>
    </sequential>
  </macrodef>


  <macrodef name="package-release">
    <attribute name="manifest" default="AndroidManifest.xml" />
    <attribute name="name" default="${ant.project.name}"/>
    <attribute name="package" />
    <sequential>
      <current:defaults />

      <!-- This property has to be set for 1.5 projects because apkbuilder is expecting it. -->
      <property name="out.release.unaligned.package" value="${build.dir}/@{name}-unaligned.apk" />
      <current:package debug="false" manifest="@{manifest}" name="@{name}-unsigned" package="@{package}"/>

      <!-- Gets passwords -->
      <input message="Please enter keystore password (store:${key.store}):" addproperty="key.password">
        <handler type="secure" />
      </input>

      <!-- Signs the APK -->
      <signjar jar="${build.dir}/@{name}-unsigned.apk"
               signedjar="${out.release.unaligned.package}"
               keystore="${key.store}"
               storepass="${key.password}"
               alias="${key.alias}"
               keypass="${key.password}"
               verbose="${verbose}" />

      <exec executable="${tools.dir}/zipalign" failonerror="true">
        <arg value="-f"/>
        <arg value="4"/>
        <arg path="${out.release.unaligned.package}"/>
        <arg path="${build.dir}/@{name}.apk"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- Repackage an Android APK for deployment on a BlackBerry device. -->
  <macrodef name="bar">
    <attribute name="package" />
    <attribute name="token" />
    <attribute name="author" />
    <sequential>
      <current:defaults />
      <exec executable="apk2bar" failonerror="true">
        <arg value="@{package}" />
        <arg value="${sdk.dir}" />
        <!--<arg value="-d" />-->
        <!--<arg value="@{token}" />-->
        <arg value="-a" />
        <arg value="@{author}" />
        <arg value="-w2" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="bar-sign">
    <attribute name="bar" />
    <attribute name="certificate" />
    <attribute name="password" />
    <sequential>
      <current:defaults />
      <exec executable="batchbar-signer" failonerror="true">
        <arg value="@{bar}" />
        <arg value="@{certificate}" />
        <arg value="@{password}" />
      </exec>
    </sequential>
  </macrodef>

</antlib>